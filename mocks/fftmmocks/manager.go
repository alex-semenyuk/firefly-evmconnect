// Code generated by mockery v2.52.2. DO NOT EDIT.

package fftmmocks

import (
	context "context"

	apitypes "github.com/hyperledger/firefly-transaction-manager/pkg/apitypes"

	mock "github.com/stretchr/testify/mock"

	txhandler "github.com/hyperledger/firefly-transaction-manager/pkg/txhandler"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Manager) Close() {
	_m.Called()
}

// GetTransactionByIDWithStatus provides a mock function with given fields: ctx, txID, withHistory
func (_m *Manager) GetTransactionByIDWithStatus(ctx context.Context, txID string, withHistory bool) (*apitypes.TXWithStatus, error) {
	ret := _m.Called(ctx, txID, withHistory)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByIDWithStatus")
	}

	var r0 *apitypes.TXWithStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*apitypes.TXWithStatus, error)); ok {
		return rf(ctx, txID, withHistory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *apitypes.TXWithStatus); ok {
		r0 = rf(ctx, txID, withHistory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apitypes.TXWithStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, txID, withHistory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with no fields
func (_m *Manager) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionHandler provides a mock function with no fields
func (_m *Manager) TransactionHandler() txhandler.TransactionHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionHandler")
	}

	var r0 txhandler.TransactionHandler
	if rf, ok := ret.Get(0).(func() txhandler.TransactionHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txhandler.TransactionHandler)
		}
	}

	return r0
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
